import Head from "next/head";
import { useEffect, useState } from "react";

import { api } from "~/utils/api";

export default function Home() {
  const [pokemonName, setPokemonName] = useState("");
  const { data: pokemon } = api.pokemon.fetchByName.useQuery({
    name: pokemonName,
  });

  return (
    <>
      <Head>
        <title>Carry Helper</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Carry Helper
          </h1>
          <DebouncedInput
            placeholder="Enter PokÃ©mon name"
            value={pokemonName}
            onChange={(v) => setPokemonName(v)}
          />
          {pokemon && (
            <div className="rounded border border-white p-3 text-white">
              <p className="text-2xl capitalize">{pokemon.name}</p>
              <ul>
                {Object.entries(pokemon.stats).map(([stat, value]) => (
                  <li
                    key={stat}
                    className={`grid grid-cols-2 gap-2 capitalize`}
                    style={{ gridTemplateColumns: "1fr 3ch" }}
                  >
                    <div className="text-right">{stat}:</div>
                    <div>{value}</div>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </main>
    </>
  );
}

const DebouncedInput: React.FC<
  {
    value: string;
    onChange: (value: string) => void;
    debounce?: number;
  } & Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange">
> = ({ value: initialValue, onChange, debounce = 300, ...props }) => {
  const [value, setValue] = useState(initialValue);

  useEffect(() => {
    setValue(initialValue);
  }, [initialValue]);

  useEffect(() => {
    const timeout = setTimeout(() => {
      onChange(value);
    }, debounce);

    return () => clearTimeout(timeout);
  }, [debounce, onChange, value]);

  return (
    <input
      {...props}
      value={value}
      onChange={(e) => setValue(e.target.value)}
      className={
        "w-64 rounded border px-2 py-1 leading-tight focus:border-pink-500 focus:shadow-md focus:outline-none"
      }
    />
  );
};

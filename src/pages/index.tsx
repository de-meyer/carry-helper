import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";

import { api } from "~/utils/api";

export default function Home() {
  const [pokemonName, setPokemonName] = useState("");
  const { data: pokemon } = api.pokemon.fetchByName.useQuery({
    name: pokemonName,
  });

  return (
    <>
      <Head>
        <title>Carry Helper</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-900">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <div className="flex flex-col gap-3 text-center">
            <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
              Carry Helper
            </h1>
            <p className="text-white">
              Check how good your Pokémon is as a carry
            </p>
            <div className="relative h-40">
              <Image
                src="/logo.png"
                alt="logo"
                fill
                className="pointer-events-none bg-black mix-blend-screen"
                style={{ objectFit: "contain" }}
              />
            </div>
          </div>
          <DebouncedInput
            placeholder="Enter Pokémon name"
            value={pokemonName}
            onChange={(v) => setPokemonName(v)}
          />
          {pokemon === undefined || pokemonName === "" ? null : pokemon ===
            null ? (
            <p className="text-2xl text-white">That&apos;s not a Pokémon</p>
          ) : (
            (() => {
              const highestStat = Object.entries(pokemon.stats).reduce(
                (acc, [stat, value]) => {
                  if (value > acc.value) {
                    return { stat, value };
                  }

                  return acc;
                },
                { stat: "", value: 0 },
              ).value;

              return (
                <div className="rounded border border-white p-3 text-white">
                  <p className="text-center text-2xl capitalize">
                    {pokemon.name}
                  </p>
                  <hr className="py-2" />
                  <ul className="flex flex-col gap-2">
                    {Object.entries(pokemon.stats).map(([stat, value]) => (
                      <>
                        <li
                          key={stat}
                          className="grid grid-cols-[1fr,3ch,1fr] gap-2 capitalize"
                        >
                          <div className="text-right">{stat}:</div>
                          <div className="w-[3ch] text-right">{value}</div>
                          <div
                            className={`h-6 ${
                              {
                                S: "bg-green-500",
                                A: "bg-green-300",
                                B: "bg-yellow-400",
                                C: "bg-yellow-600",
                                D: "bg-red-300",
                                F: "bg-red-500",
                              }[statValueToTier(value)]
                            }`}
                            style={{ width: `${(value / 255) * 100}%` }}
                          />
                        </li>
                        {stat === "special-attack" && <hr />}
                      </>
                    ))}
                  </ul>
                </div>
              );
            })()
          )}
        </div>
      </main>
    </>
  );
}

const DebouncedInput: React.FC<
  {
    value: string;
    onChange: (value: string) => void;
    debounce?: number;
  } & Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange">
> = ({ value: initialValue, onChange, debounce = 300, ...props }) => {
  const [value, setValue] = useState(initialValue);

  useEffect(() => {
    setValue(initialValue);
  }, [initialValue]);

  useEffect(() => {
    const timeout = setTimeout(() => {
      onChange(value);
    }, debounce);

    return () => clearTimeout(timeout);
  }, [debounce, onChange, value]);

  const inputRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    if (!inputRef.current) {
      return;
    }

    inputRef.current.focus();
  }, []);

  return (
    <input
      {...props}
      ref={inputRef}
      value={value}
      onChange={(e) => setValue(e.target.value)}
      className={
        "w-80 rounded border px-2 py-1 text-center text-3xl leading-tight focus:outline-none"
      }
    />
  );
};

const statValueToTier = (value: number) => {
  if (value >= 150) return "S";
  if (value >= 120) return "A";
  if (value >= 100) return "B";
  if (value >= 80) return "C";
  if (value >= 60) return "D";
  return "F";
};
